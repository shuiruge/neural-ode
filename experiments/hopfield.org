#+TITLE: Experiments on Continuum of Hopfield

* Prepare Dataset

We do experiments on MNIST dataset. We first load the dataset, in raw.

#+BEGIN_SRC python :session :results output
import tensorflow as tf
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)

mnist = tf.keras.datasets.mnist
(x_train, y_train), _ = mnist.load_data()
print(x_train.shape, y_train.shape)
#+END_SRC

#+RESULTS:
#+begin_example
Python 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)] :: Anaconda, Inc. on win32

Warning:
This Python interpreter is in a conda environment, but the environment has
not been activated.  Libraries may fail to load.  To activate this environment
please see https://conda.io/activation

Type "help", "copyright", "credits" or "license" for more information.
2020-04-16 17:20:10.044567: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'cudart64_101.dll'; dlerror: cudart64_101.dll not found
2020-04-16 17:20:10.044769: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.
(60000, 28, 28) (60000,)
#+end_example

Next we process the raw data, including:

  1. binarization
  2. reshape
  3. one-hot target

#+BEGIN_SRC python :session :results output
import numpy as np

def process(X, y):
  X = X / 255.
  X = np.where(X > 0.5, 1., 0.)
  X = np.reshape(X, [-1, 28 * 28])
  y = np.eye(10)[y]
  return X.astype('float32'), y.astype('float32')

x_train, y_train = process(x_train, y_train)
#+END_SRC

#+RESULTS:

It's essential to shift and rescale so that the inputs are approximately standard Gaussian. This is made for satisfying the essential condition of Glorot initialization.

#+BEGIN_SRC python :session :results output
from sklearn.preprocessing import StandardScaler

scalar = StandardScaler()
scalar.fit(x_train)
x_train = scalar.transform(x_train)
#+END_SRC

#+RESULTS:

* Train a Model

With the analysis in the doc, we employ the format $\mathcal{E}(x) \propto \sqrt{f^a(x) f_a(x)}$.

#+BEGIN_SRC python :session :results output
@tf.function
def lower_bounded_fn(x):
  return 5 * tf.sqrt(tf.reduce_sum(tf.square(x), axis=1))
#+END_SRC

#+RESULTS:

Now we build and compile, and then fit a Hopfield model.

#+BEGIN_SRC python :session :results output
from hopfield import HopfieldModel

model = HopfieldModel(
  lower_bounded_fn, units=64, t=1.0, dt=0.1, layerized=False)
model.compile(
  loss='categorical_crossentropy',
  optimizer=tf.optimizers.Nadam(1e-3, epsilon=1e-3),
  metrics=['accuracy'])
model.fit(x_train, y_train,
          epochs=1, batch_size=128,
          verbose=2)
#+END_SRC

#+RESULTS:
: 2020-04-16 17:20:43.923450: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'nvcuda.dll'; dlerror: nvcuda.dll not found
: 2020-04-16 17:20:43.923636: E tensorflow/stream_executor/cuda/cuda_driver.cc:351] failed call to cuInit: UNKNOWN ERROR (303)
: 2020-04-16 17:20:43.927433: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:169] retrieving CUDA diagnostic information for host: DESKTOP-I256PJU
: 2020-04-16 17:20:43.927684: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:176] hostname: DESKTOP-I256PJU
: 2020-04-16 17:20:43.928015: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
: Train on 60000 samples
: 2020-04-16 17:20:46.387971: W tensorflow/core/common_runtime/shape_refiner.cc:88] Function instantiation has undefined input shape at index: 14 in the outer inference context.
: 2020-04-16 17:20:46.388174: W tensorflow/core/common_runtime/shape_refiner.cc:88] Function instantiation has undefined input shape at index: 10 in the outer inference context.
: 60000/60000 - 89s - loss: 0.3571 - accuracy: 0.8983

Looks reasonable. Save to disk since this processing is costy.

#+BEGIN_SRC python :session :results output
model.save('../dat/hopfield')
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session :results output
model = tf.keras.models.load_model('../dat/hopfield')
#+END_SRC

#+RESULTS:
#+begin_example
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "c:/Users/KSJ/AppData/Local/Temp/babel-13296Wr-/python-13296Gfa", line 4, in <module>
    MODEL_CKPT, custom_objects={'HopfieldModel': HopfieldModel})
  File "C:\Users\KSJ\AppData\Roaming\Python\Python37\site-packages\tensorflow_core\python\keras\saving\save.py", line 146, in load_model
    return hdf5_format.load_model_from_hdf5(filepath, custom_objects, compile)
  File "C:\Users\KSJ\AppData\Roaming\Python\Python37\site-packages\tensorflow_core\python\keras\saving\hdf5_format.py", line 168, in load_model_from_hdf5
    custom_objects=custom_objects)
  File "C:\Users\KSJ\AppData\Roaming\Python\Python37\site-packages\tensorflow_core\python\keras\saving\model_config.py", line 55, in model_from_config
    return deserialize(config, custom_objects=custom_objects)
  File "C:\Users\KSJ\AppData\Roaming\Python\Python37\site-packages\tensorflow_core\python\keras\layers\serialization.py", line 106, in deserialize
    printable_module_name='layer')
  File "C:\Users\KSJ\AppData\Roaming\Python\Python37\site-packages\tensorflow_core\python\keras\utils\generic_utils.py", line 303, in deserialize_keras_object
    list(custom_objects.items())))
  File "C:\Users\KSJ\AppData\Roaming\Python\Python37\site-packages\tensorflow_core\python\keras\engine\sequential.py", line 374, in from_config
    model = cls(name=name)
TypeError: __init__() got an unexpected keyword argument 'name'
#+end_example

* Convergence

#+BEGIN_SRC python :session :results output
from hopfield import longer_period_effect
longer_period_effect(model, 3.0, x_train, y_train)
#+END_SRC

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
:   File "c:/Users/KSJ/AppData/Local/Temp/babel-13296Wr-/python-132964TN", line 2, in <module>
:     longer_period_effect(model, 3.0, x_train, y_train)
:   File "c:\Users\KSJ\Documents\Codes\neural-ode\experiments\hopfield.py", line 135, in longer_period_effect
:     longer_period_model = get_longer_period_model(model, t)
:   File "c:\Users\KSJ\Documents\Codes\neural-ode\experiments\hopfield.py", line 123, in get_longer_period_model
:     model.lower_bounded_fn, model.units, t, model.dt, layerized=False)
: AttributeError: 'HopfieldModel' object has no attribute 'units'


* Robustness on Noise

#+BEGIN_SRC python :session :results output
# test noise effect

add_noise = add_white_noise(scalar, scale=0.03)
noised_effect(model, add_noise, x_train, y_train)

longer_period_model = get_longer_period_model(model, t=3.0)
noised_effect(longer_period_model, add_noise, x_train, y_train)

non_node_model = get_non_node_model(model, x_train, y_train)
noised_effect(non_node_model, add_noise, x_train, y_train)
#+END_SRC
